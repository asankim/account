services:
  rabbitmq:
    image: 'rabbitmq:3-management'
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - /var/lib/rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    env_file:
      - .env

  account:
    build:
      context: ./
      dockerfile: ./apps/account/Dockerfile
    ports:
      - '4001:4001'
    env_file:
      - .env
    depends_on:
      - rabbitmq
    volumes:
      - .:/usr/src/app # any change to base folder should be reflected
      - /usr/src/app/node_modules
    command: npm run start:dev account

  api:
    build:
      context: ./
      dockerfile: ./apps/api/Dockerfile
    ports:
      - '4000:5000'
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - account
    volumes:
      - .:/usr/src/app # any change to base folder should be reflected
      - /usr/src/app/node_modules
      - ./proto:/proto
    command: npm run start:dev api

  mongo:
    build:
      context: ./mongodb_rs
      args:
        MONGO_VERSION: 4
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: root-db
      MONGO_REPLICA_HOST: 127.0.0.1
      MONGO_REPLICA_PORT: 27018
      # Use "mongo" instead of "mongosh" before v5.0
      MONGO_COMMAND: 'mongo'
    ports:
      - '27018:27018'
    restart: unless-stopped
    healthcheck:
      # Use "mongo" instead of "mongosh" before v5.0
      test:
        [
          'CMD',
          'mongo',
          'admin',
          '--port',
          '27018',
          '--eval',
          "db.adminCommand('ping').ok",
        ]
      interval: 5s
      timeout: 2s
      retries: 20
